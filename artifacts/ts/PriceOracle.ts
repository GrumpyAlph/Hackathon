/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as PriceOracleContractJson } from "../oracle/PriceOracle.ral.json";
import { getContractByCodeHash } from "./contracts";
import { Prediction, PriceOracleValue, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace PriceOracleTypes {
  export type Fields = {
    trustedSource: Address;
    predictionCount: bigint;
  };

  export type State = ContractState<Fields>;

  export type PredictionUpdatedEvent = ContractEvent<{
    date: bigint;
    text: HexString;
    price: bigint;
  }>;

  export interface CallMethodTable {
    updatePrediction: {
      params: CallContractParams<{
        newDate: bigint;
        newText: HexString;
        newPrice: bigint;
      }>;
      result: CallContractResult<null>;
    };
    getLatestPrediction: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Prediction>;
    };
    getPredictionAt: {
      params: CallContractParams<{ index: bigint }>;
      result: CallContractResult<Prediction>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    updatePrediction: {
      params: SignExecuteContractMethodParams<{
        newDate: bigint;
        newText: HexString;
        newPrice: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getLatestPrediction: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getPredictionAt: {
      params: SignExecuteContractMethodParams<{ index: bigint }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { predictions?: Map<bigint, Prediction> };
}

class Factory extends ContractFactory<
  PriceOracleInstance,
  PriceOracleTypes.Fields
> {
  encodeFields(fields: PriceOracleTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { PredictionUpdated: 0 };
  consts = {
    ErrorCodes: { Unauthorized: BigInt("0"), InvalidIndex: BigInt("1") },
  };

  at(address: string): PriceOracleInstance {
    return new PriceOracleInstance(address);
  }

  tests = {
    updatePrediction: async (
      params: TestContractParams<
        PriceOracleTypes.Fields,
        { newDate: bigint; newText: HexString; newPrice: bigint },
        PriceOracleTypes.Maps
      >
    ): Promise<TestContractResult<null, PriceOracleTypes.Maps>> => {
      return testMethod(
        this,
        "updatePrediction",
        params,
        getContractByCodeHash
      );
    },
    getLatestPrediction: async (
      params: Omit<
        TestContractParams<
          PriceOracleTypes.Fields,
          never,
          PriceOracleTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<Prediction, PriceOracleTypes.Maps>> => {
      return testMethod(
        this,
        "getLatestPrediction",
        params,
        getContractByCodeHash
      );
    },
    getPredictionAt: async (
      params: TestContractParams<
        PriceOracleTypes.Fields,
        { index: bigint },
        PriceOracleTypes.Maps
      >
    ): Promise<TestContractResult<Prediction, PriceOracleTypes.Maps>> => {
      return testMethod(this, "getPredictionAt", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: PriceOracleTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: PriceOracleTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const PriceOracle = new Factory(
  Contract.fromJson(
    PriceOracleContractJson,
    "=6-2+62=2-2+b7=2-2+ff=13-1+3=84+7a7e0214696e73657274206174206d617020706174683a2000=362",
    "5d363ea4a6d91d5d77c1952f969eef89dccda60536f6454c69aac096b216aed8",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class PriceOracleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    predictions: new RalphMap<bigint, Prediction>(
      PriceOracle.contract,
      this.contractId,
      "predictions"
    ),
  };

  async fetchState(): Promise<PriceOracleTypes.State> {
    return fetchContractState(PriceOracle, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribePredictionUpdatedEvent(
    options: EventSubscribeOptions<PriceOracleTypes.PredictionUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PriceOracle.contract,
      this,
      options,
      "PredictionUpdated",
      fromCount
    );
  }

  view = {
    updatePrediction: async (
      params: PriceOracleTypes.CallMethodParams<"updatePrediction">
    ): Promise<PriceOracleTypes.CallMethodResult<"updatePrediction">> => {
      return callMethod(
        PriceOracle,
        this,
        "updatePrediction",
        params,
        getContractByCodeHash
      );
    },
    getLatestPrediction: async (
      params?: PriceOracleTypes.CallMethodParams<"getLatestPrediction">
    ): Promise<PriceOracleTypes.CallMethodResult<"getLatestPrediction">> => {
      return callMethod(
        PriceOracle,
        this,
        "getLatestPrediction",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPredictionAt: async (
      params: PriceOracleTypes.CallMethodParams<"getPredictionAt">
    ): Promise<PriceOracleTypes.CallMethodResult<"getPredictionAt">> => {
      return callMethod(
        PriceOracle,
        this,
        "getPredictionAt",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    updatePrediction: async (
      params: PriceOracleTypes.SignExecuteMethodParams<"updatePrediction">
    ): Promise<
      PriceOracleTypes.SignExecuteMethodResult<"updatePrediction">
    > => {
      return signExecuteMethod(PriceOracle, this, "updatePrediction", params);
    },
    getLatestPrediction: async (
      params: PriceOracleTypes.SignExecuteMethodParams<"getLatestPrediction">
    ): Promise<
      PriceOracleTypes.SignExecuteMethodResult<"getLatestPrediction">
    > => {
      return signExecuteMethod(
        PriceOracle,
        this,
        "getLatestPrediction",
        params
      );
    },
    getPredictionAt: async (
      params: PriceOracleTypes.SignExecuteMethodParams<"getPredictionAt">
    ): Promise<PriceOracleTypes.SignExecuteMethodResult<"getPredictionAt">> => {
      return signExecuteMethod(PriceOracle, this, "getPredictionAt", params);
    },
  };

  async multicall<Callss extends PriceOracleTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<PriceOracleTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      PriceOracle,
      this,
      callss,
      getContractByCodeHash
    )) as PriceOracleTypes.MulticallReturnType<Callss>;
  }
}
